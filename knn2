import csv
import random
import math
import operator
from blaze.compute.tests.test_h5py import file
from networkx.classes.function import neighbors
from audioop import reverse
from nltk.chunk.util import accuracy
'''
csv用来调用csv文件
random用于生成随机数
math、operator用于引用数学公式计算

'''
#装载需要的数据集
'''
filename倒入文件的名称
split把数据集分成数据集和测试集，界限值
分成trainingSet[],testSet[]
'''
def loadDataset(filename,split,trainingSet = [],testSet = []):
    with open(filename,"rt") as csvfile:  #以csv形式读入文件
        lines = csv.reader(csvfile)
        dataset = list(lines)
        for x in range(len(dataset)-1):
            for y in range(4):
                dataset[x][y] = float(dataset[x][y])
            if random.random() <split:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])
#如何计算
'''
初始化距离
每一纬度进行差的运算并且平方求和
利用函数开方

'''
def euclideanDistance(instance1,instance2,length):
    distance = 0
    for x in range(length):
        distance += pow((instance1[x] -instance2[x]),2)
    return math.sqrt(distance)
#用来返回最近的k个邻距
'''
返回最近的k
从训练集选择最近的k个邻距
最开始计算所有的距离并且放进容器distance
然后将距离排序

'''
def getNeighbors(trainingSet,testInstance,k):
    distances = []
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        distances.append((trainingSet[x],dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors =[]
    for x in range(k):
        neighbors.append(distances[x][0])
        return neighbors

#把数据集中的点进行分类处理
'''
根据邻距里面每个分类
每类投票个数再次排序

'''
def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] +=1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.items(),key = operator.itemgetter(1),reverse = True)
    return sortedVotes[0][0]

#测算预测出的值与实际值相比的准确率

def getAccuracy(testSet,predictions):
    correct = 0
    x = 0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
            correct +=1
        x = x+1
    return (correct/float(len(testSet))) *100

def main():
    #prepare data
    trainingSet = []
    testSet = []
    split = 0.67
    loadDataset("irisdata.txt", split, trainingSet, testSet)
    print("Train set:" + repr(len(trainingSet)))
    print("Test set:" + repr(len(testSet)))
    predictions = []
    k = 3
    for x in range(len(testSet)):
        neighbors = getNeighbors(trainingSet, testSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print(">predicted = " + repr(result) +",actual = " +repr(testSet[x][-1]))
    accuracy = getAccuracy(testSet, predictions)
    print("Accuracy:" +repr(accuracy) + "%")
main()

'''
Created on 2019年4月10日

@author: 杜莹
'''
import numpy as np
from blaze.partition import Dataset
from scipy.cluster.hierarchy import centroid
from envs.untitled1.Lib.platform import dist
from _ast import Return
'''
定义算法
X为数据集
k为分隔
maxIt为迭代次数上限
'''
def kmeans(X,k,maxIt):
    numPoints = X.shape[0]
    numDim = X.shape[1]
    #获得X的行列数
    dataSet = np.zeros((numPoints,numDim+ 1 ))
    #创建新的数据集 比X多一列
    dataSet[:,:-1] = X
    #复制X相当于在X的基础上加最后一列0
    centroids = dataSet[np.random.randint(numPoints,size = k)]
    #controids = dataSet[0:2,:]
    #随机选取K个中心点
    centroids[:,-1] = range(1,k+1)
    #给中心点的赋值编号
    iterations = 0
    #迭代次数
    oldCentroids = None
    #储存旧的中心点
    '''
    传入新旧中心点 如果二者相等退出循环
    传入迭代次数最高和记录次循环执行次数
    如果达到最高次数 退出循环
    '''
    while not shouldStop(oldCentroids,centroids,iterations,maxIt):
        print("iteration:\n",iterations)
        print("dataSet:\n",Dataset)
        print("centroids:\n",centroids)
        oldCentroids = np.copy(centroids)   #注意不能用等号
        iterations +=1
        updateLabels(dataSet,centroids)
        centroids = getCentroids(dataSet,k) #返回新的中心点
    return  dataSet
def shouldStop(oldCentroids,centroids,iterations,maxIt):
    if iterations >maxIt:
        return True
    return np.array_equal(oldCentroids, centroids) #相等返回True
'''
传入数据集的每一行计算k个中心点的距离
将最短的距离归类到该中心点
'''
def updateLabels(dataSet,centroids):
    numPoints,numDim = dataSet.shape
    for i in range(0,numPoints):
        dataSet[i,-1] = getLabelFromClosestCentroid(dataSet[i,:-1],centroids)
        #选出距离该点最小位置的中心点

def getLabelFromClosestCentroid(dataSetRow,centroids):
    label = centroids[0,-1]
    minDist = np.linalg.norm(dataSetRow - centroids[0,:-1])
    for i in range(1,centroids.shape[0]):
        dist = np.linalg.norm(dataSetRow - centroids[i,:-1])
        if dist < minDist:
            minDist  = dist
            label = centroids[i,-1]
        print("minDist:",minDist)
        return label
'''
计算新的中心点位置
'''        
def getCentroids(dataSet,k):
    result = np.zeros((k,dataSet.shape[1]))
    for i in range(1,k+1):
        oneCluster = dataSet[dataSet[:,-1] == i,:-1]
        result[i-1,:-1] = np.mean(oneCluster,axis = 0)
        result[i - 1,-1] = i 
    return result
x1 = np.array([1,1])
x2 = np.array([2,1])
x3 = np.array([4,3])
x4 = np.array([5,4])
testX = np.vstack((x1,x2,x3,x4)) 
result = kmeans(testX,2,10)
print("finally result")
print(result) 

'''
Created on 2019年4月9日

@author: 杜莹
'''
import numpy as np
from astropy.units import Ybarn
import math
from statsmodels.tsa.statespace._representation import sStatespace
from twisted.web.server import _addressToTuple
'''
    计算相关度
'''
def computeCorrelation(X,Y):
    xBar = np.mean(X)  #计算X均值
    yBar = np.mean(Y)  #计算Y均值
    SSR = 0  #分别初始化
    varX = 0
    varY = 0
    for i in range(0,len(X)):
        diffXXBar = X[i] - xBar
        diffYYBar = Y[i] - yBar
        SSR += (diffXXBar * diffYYBar)
        varX += diffXXBar **2
        varY += diffYYBar **2
    SST = math.sqrt(varX * varY)
    return  SSR/SST

def polyfit(x,y,degree):
    results ={}
    coeffs = np.polyfit(x, y, degree) #degree回归方程X的幂数
    #计算相关系数
    results["polynomial"] = coeffs.tolist()
    #转化成list
    p = np.poly1d(coeffs)
    #计算预测值
    yhat = p(x)
    ybar = np.mean(y)
    ssreg = np.sum((yhat-ybar)**2)
    sstot = np.sum((y - ybar)**2)
    results["determination"] = ssreg/sstot
    
    return results
testX = [1,3,8,7,9]
testY = [10,12,24,21,34]

print("r:",computeCorrelation(testX, testY))
print("r^2", str(computeCorrelation(testX, testY)**2))

print (polyfit(testX,testY,1))
'''
Created on 2019年3月31日

@author: 杜莹
'''
import numpy as np

def fitSLR(x,y):
    n = len(x)
    dinominator = 0
    numerator = 0
    for i  in range(n):
        numerator += (x[i] - np.mean(x)) * (y[i] - np.mean(y))
        dinominator += (x[i] - np.mean(x))**2
    
    print("numerator:",numerator)
    print("dinominator:",dinominator)
    b1 = numerator/float(dinominator)
    b0 = np.mean(y)/float(np.mean(x))
    
    return b0,b1

def predict(x ,b0 ,b1):
    return  b0 + x*b1
x = [1,3,2,1,3]
y = [14,24,18,17,27]

b0,b1 = fitSLR(x, y)

from src.knn import clf
print("doc")

import numpy as np
import pylab as pl
from sklearn import svm
'''
创建四十个点 0表示每次都抓取相同的点
20行两列 均值方差为2
'''
np.random.random(0)
X = np.r_(np.random.random(20,2) - [2,2],np.random.random(20,2) + [2,2])
Y = [0] * 20 + [1]*20

clf = svm.SVC(kernel="linear")
clf.fit(X,Y)

'''
导出公式
计算适当的参数
'''
w = clf.coef_[0]
a = -w[0]/w[1]
xx = np.linspace(-5,5)
yy = a *xx -(clf.intercept_[0]) /w[1]
'''
三条线具有相同的斜率
分别计算截距
'''
b = clf.support_vectors_[0]
yy_down = a - xx + (b[1] - a *b[0])
b = clf.support_vectors_[-1]
yy_up =a * xx +(b[1] - a *b[0])

print("w:",w)
print("a:",a)

print("support_vectors:", clf.support_vectors_)
print("clf.cpef_:",clf.coef_)

pl.plot(xx,yy,"k-")
pl.plot(xx,yy_down,"k--")
pl.plot(xx,yy_up,"k++")

pl.scatter(clf.support_vectors_[:,0,clf.support_vectors_[:,1]]) 

pl.axis("tight")
pl.show()







from sklearn import svm
from src.text001 import clf
from sklearn.tree.tests.test_tree import CLF_CRITERIONS
#建立三个实例
#0，1表示正负分类
X = [[2,0],[1,1],[2,3]]
y = [0,0,1]
clf = svm.SVC(kernel = "linear")
clf.fit(X,y)  #每次调用模型惯例用fit

#找到支持向量
print(clf.support_vectors_)

#找到属于支持向量的点的位置
print(clf.support_)

#判断支持向量点的数量
print(clf.n_support_)
